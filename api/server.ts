import express from "express";
import { Express } from "express";

import Logger from "../utils/logger";
import { loadStage } from "../utils/stage";
import {
  createPgClient,
  initializeDatabaseConnection,
  terminateDatabaseConnection,
  isConnectedToDatabase,
  getPgClient,
  checkDatabaseHealth,
} from "../utils/database";
import userRouter from "./routes/user";
import { Client } from "pg";

// Extend the request and reponse interfaces
export interface ExpectedRequest extends express.Request {
  id?: string;
  limit?: string;
  offset?: string;
  pgClient?: Client | null;
}
export interface ExpectedResponse extends express.Response {}

// Define the global autogenerated fields
export const GLOBAL_AUTOGENERATED_FIELDS: string[] = [
  "created_at",
  "updated_at",
];

// Define the fixed variables for rate limiting
const RATE_WINDOW_MS = 60_000; // 1 minute
const RATE_THRESHOLD = 1000;

// Initialize the global variables
const PORT: number = 1111;

// Define the app variable
let app: Express;

// Setting up the server process
async function setupServer() {
  // Loading the stage variable
  await loadStage();

  // Creating a postgresql client
  const pgClient: Client = createPgClient();

  // Initiating a connection with the pgClient
  await initializeDatabaseConnection(pgClient);

  // Skip server listening
  if (!isConnectedToDatabase()) {
    Logger.info("Skipping the server listening.");
    process.exit(1);
  }

  // Setup a database healthcheck on defined intervals
  setInterval(() => checkDatabaseHealth(pgClient), 3600_000); // 1 hour

  // Initiate the api server
  app = express();

  // See whether request is signed with a registered API key
  app.use((req: ExpectedRequest, res: ExpectedResponse, next) => {
    // Fetch the request API key
    const reqAPIKey: string | string[] | undefined = req.headers["x-api-key"];

    // Retrieve all the API keys present in the environmental variables
    let APIKeys: Record<string, string> = {};
    for (const [key, value] of Object.entries(process.env)) {
      if (/VAJ_API_KEY/.test(key) && value !== undefined) {
        APIKeys[key] = value;
      }
    }

    // Check to see if the request API key is present in the list of registered API keys
    if (
      !reqAPIKey ||
      Array.isArray(reqAPIKey) ||
      !Object.values(APIKeys).includes(reqAPIKey)
    ) {
      res.status(403).json({ error: "Forbidden: Invalid API Key" }).end();
      return;
    }
    next();
  });

  // Checks to see the status of the database
  app.use(async (req: ExpectedRequest, res: ExpectedResponse, next) => {
    if (!isConnectedToDatabase()) {
      Logger.info("Attempting new connection to the database.");
      await initializeDatabaseConnection(pgClient);
      if (!isConnectedToDatabase) {
        res
          .status(503)
          .json({ error: "Service unavailable: database is unreachable." })
          .end();
        return;
      }
    }
    next();
  });

  // Rate limiting the requests using a global fixed window counter strategy
  let requestCounter = 0;
  let windowStart = Date.now();
  app.use((req: ExpectedRequest, res: ExpectedResponse, next) => {
    const now = Date.now();

    if (now - windowStart > RATE_WINDOW_MS) {
      // Reset the window
      windowStart = now;
      requestCounter = 0;
    }

    requestCounter++;

    if (requestCounter > RATE_THRESHOLD) {
      res
        .status(429)
        .json({ error: "Rate limit exceeded. Please try again later." })
        .end();
      return;
    }

    next();
  });

  // Parse the incoming JSON bodies
  app.use(express.json());

  // Handeling the query parameters
  app.use((req: ExpectedRequest, res: ExpectedResponse, next) => {
    // Handeling the limit query parameter
    let limit: string | undefined = undefined;
    if (typeof req.query.limit === "string") {
      limit = req.query.limit;
    }
    req.limit = limit;

    // Handeling the offset query parameter
    let offset: string | undefined = undefined;
    if (typeof req.query.offset === "string") {
      offset = req.query.offset;
    }
    req.offset = offset;

    next();
  });

  // Adding the routers
  app.use("/user", userRouter);

  // Catching requests to undefined routes
  app.use((req: ExpectedRequest, res: ExpectedResponse, next) => {
    res
      .status(404)
      .json({ error: `Route '${req.originalUrl}' not found.` })
      .end();
    return;
  });
}

// Starting up the server process
async function startServer() {
  // Start the listen process
  app.listen(PORT, () => {
    // Load the host and the port
    const host: string | undefined = process.env.DATABASE_HOST;
    if (!host) {
      Logger.error(
        "Unable to retrieve the database host from the environmental variables."
      );
      process.exit(1);
    }
    Logger.info(`Server listening at http://${host}:${PORT}`);
  });
}

// On terminating the server process
function terminateServer() {
  process.on("SIGINT", async () => {
    Logger.info(
      "Received SIGINT. Terminating the server process. Cleaning up..."
    );
    await terminateDatabaseConnection();
    process.exit(isConnectedToDatabase() ? 0 : 1);
  });

  process.on("SIGTERM", async () => {
    Logger.info(
      "Received SIGTERM. Terminating the server process. Cleaning up..."
    );
    await terminateDatabaseConnection();
    process.exit(isConnectedToDatabase() ? 0 : 1);
  });
}

// Orchestrate the server creation process
(async () => {
  await setupServer(); // Wait until setup is done
  startServer(); // Then start the listener
  terminateServer(); // Setup graceful shutdown
})();
